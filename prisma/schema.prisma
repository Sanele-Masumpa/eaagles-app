generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ENTREPRENEUR
  INVESTOR
}

model User {
  id                    Int                   @id @default(autoincrement())
  clerkId               String                @unique
  email                 String                @unique
  name                  String?
  imageUrl              String?
  role                  Role
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  messagesSent          Message[]             @relation("MessageSender")
  messagesReceived      Message[]             @relation("MessageReceiver")
  investments           Investment[]
  entrepreneurProfile   EntrepreneurProfile?
  investorProfile       InvestorProfile?
  pitches               Pitch[]
  feedbacks             Feedback[]
  interests             Interest[]
  sentFriendRequests    FriendRequest[]       @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]      @relation("ReceivedFriendRequests")
}

enum Stage {
  IDEA
  VALIDATION
  MVP
  GROWTH
  SCALING
  EXIT
}

model Pitch {
  id                   Int                   @id @default(autoincrement())
  title                String
  description          String
  entrepreneurId       Int
  entrepreneur         EntrepreneurProfile   @relation(fields: [entrepreneurId], references: [id])
  feedbacks            Feedback[]
  interests            Interest[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  fundingGoal          Float?
  attachments          String[]
  videoUrl             String?

  User User[]
}




model EntrepreneurProfile {
  id                    Int                   @id @default(autoincrement())
  userId                Int                   @unique
  user                  User                  @relation(fields: [userId], references: [id])
  bio                   String?
  company               String?
  businessStage         String?
  fundingHistory        String?
  linkedinUrl           String?
  imageUrl              String?               // Field for storing image URL
  pitches               Pitch[]               // Pitches submitted by the entrepreneur
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  investments           Investment[]
  notifications         Notification[]        // Added field for notifications
  revenue               Float?                // Added revenue field
  investmentOpportunities InvestmentOpportunity[] // Added field for investment opportunities
}

model FriendRequest {
  id                   Int                   @id @default(autoincrement())
  senderId             Int
  receiverId           Int
  sender               User                  @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver             User                  @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  status               FriendRequestStatus   @default(PENDING)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@unique([senderId, receiverId]) 
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}



model InvestmentOpportunity {
  id                   Int                   @id @default(autoincrement())
  title                String
  description          String?
  amount               Float?
  entrepreneurProfileId Int
  entrepreneurProfile  EntrepreneurProfile   @relation(fields: [entrepreneurProfileId], references: [id])
  investments          Investment[]          @relation("InvestmentOpportunityInvestments")

  Investment Investment[]
}

model InvestorProfile {
  id                    Int                   @id @default(autoincrement())
  userId                Int                   @unique
  user                  User                  @relation(fields: [userId], references: [id])
  investmentStrategy    String?
  linkedinUrl           String?
  investments           Investment[]          // Investments made by the investor
  feedbacks             Feedback[]            // Feedback given by the investor
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  notifications         Notification[]        // Add this line
}



model Message {
  id                   Int                   @id @default(autoincrement())
  content              String
  senderId             Int
  receiverId           Int
  sender               User                  @relation("MessageSender", fields: [senderId], references: [id])
  receiver             User                  @relation("MessageReceiver", fields: [receiverId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Investment {
  id                   Int                   @id @default(autoincrement())
  amount               Float
  date                 DateTime              @default(now())
  title                String 
  investorProfileId    Int
  entrepreneurProfileId Int
  investorProfile      InvestorProfile       @relation(fields: [investorProfileId], references: [id])
  entrepreneurProfile  EntrepreneurProfile   @relation(fields: [entrepreneurProfileId], references: [id])
  investmentOpportunityId Int
  investmentOpportunity InvestmentOpportunity @relation(fields: [investmentOpportunityId], references: [id])

  User User[]

  InvestmentOpportunity InvestmentOpportunity[] @relation("InvestmentOpportunityInvestments")
}


model Feedback {
  id                   Int                   @id @default(autoincrement())
  content              String
  investorId           Int
  pitchId              Int
  investor             InvestorProfile       @relation(fields: [investorId], references: [id])
  pitch                Pitch                 @relation(fields: [pitchId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  User User[]
}

model Interest {
  id                   Int                   @id @default(autoincrement())
  userId               Int
  pitchId              Int
  user                 User                  @relation(fields: [userId], references: [id])
  pitch                Pitch                 @relation(fields: [pitchId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Notification {
  id                   Int                   @id @default(autoincrement())
  content              String
  entrepreneurId       Int
  investorId           Int
  entrepreneur         EntrepreneurProfile   @relation(fields: [entrepreneurId], references: [id])
  investor             InvestorProfile       @relation(fields: [investorId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}